# This file is part of PySFD.
#
# Copyright (c) 2018 Sebastian Stolzenberg,
# Computational Molecular Biology Group,
# Freie Universitaet Berlin (GER)
#
# PySFD is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
#
# These VMD/python code snippets are to assist in 
# defining the structural region-to-residue-range mapping
# used in the "distance_regions" feature, in particular
# df_rgn_seg_res (in PySFD and VisFeatDiffs/PyMOL) and
# rgn2segres (in VisFeatDiffs/VMD)
#
# These snippets are just a framework to get you started,
# of course, manual refinements are necessary.
#

#
# convert df_rgn_seg_res into rgn2segres
# python 3
print("array set rgn2segres {")
for x in list(zip(df_rgn_seg_res.rgn, df_rgn_seg_res.seg, df_rgn_seg_res.res.apply(lambda x: "%d to %d" % (x[0], x[-1])))):
    print("%s \"%s, %s\" \\" % x)
print("}")
# (and then copy paste into scripts/rgn2segres.tcl)


#
## create df_rn_seg_res with VMD and python

#####################
# first in VMD:
#####################

mol load webpdb 3pdo

foreach myseg { A B C } {
set mysel [atomselect top "chain $myseg and name CA"]
puts $myseg 
puts [$mysel get structure]
puts [$mysel get resid]
$mysel delete
}
#A
#C C C C E E E E E E E E E E E E T T T E E E E E E E E T T E E E E E E E T T T T E E E E T T G G G G G C E E C C H H H H H H H H H H H H H H H H H H H H H H T T T C C C C B C C E E E E E E T T T C T T T T C E E E E E E E E E E B T T T C E E E E E E T T E E C T T T T E E C C C E E T T T T C E E E E E E E E E C C T T T T E E E E E E E T T T T T T T E E E E E E T T T C C
#0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184
#B
#C C C C C C C E E E E E E E E E E E E T T T T E E E E E E E E E E T T E E E E E E E T T T T C E E E T T G G G H H H H H H H H H C H H H H H H H H H H H H H H H H H H H H H H G G G T T T T C B C C E E E E E E E C C T T T T C C C E E E E E E E C B B C C C C E E E E E E T T E E E T T T E E E C C C E E T T T T C E E T T T E E E E C C C T T T T E E E E E E E E T T E E E E E E E E E E C

#C
#C C E E C C C C C C C C C C C C C
#103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
#####################

#####################
# ... further in python (copy & paste from above):
#####################

import numpy as np
seg2ss  = {}
seg2res = {}
seg2ss["A"]  = "C C C C E E E E E E E E E E E E T T T E E E E E E E E T T E E E E E E E T T T T E E E E T T G G G G G C E E C C H H H H H H H H H H H H H H H H H H H H H H T T T C C C C B C C E E E E E E T T T C T T T T C E E E E E E E E E E B T T T C E E E E E E T T E E C T T T T E E C C C E E T T T T C E E E E E E E E E C C T T T T E E E E E E E T T T T T T T E E E E E E T T T C C"
seg2res["A"] = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184"
seg2ss["B"] = "C C C C C C C E E E E E E E E E E E E T T T T E E E E E E E E E E T T E E E E E E E T T T T C E E E T T G G G H H H H H H H H H C H H H H H H H H H H H H H H H H H H H H H H G G G T T T T C B C C E E E E E E E C C T T T T C C C E E E E E E E C B B C C C C E E E E E E T T E E E T T T E E E C C C E E T T T T C E E T T T E E E E C C C T T T T E E E E E E E E T T E E E E E E E E E E C"
seg2res["B"] = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190"
seg2ss["C"] = "C C E E C C C C C C C C C C C C C"
seg2res["C"] = "103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119"

# this detects changes in secondary structure,
# based on which region-to-segres defintions are made
diff_res       = {}
# for df_rgn_seg_res
l_rgnlbl       = {}
l_rgnres       = {}
l_seg          = {}
# for rgn2segres
l_vmdrgn       = {}
l_vmdrgn_check = {}
for myseg in seg2ss:
    print(myseg)
    seg2ss[myseg]   = np.array( seg2ss[myseg].split())
    seg2res[myseg]  = np.array(seg2res[myseg].split())
    diff_res[myseg] = list(seg2res[myseg][np.where(seg2ss[myseg][1:] != seg2ss[myseg][:-1])[0]].astype("int"))
    #print diff_res[myseg]
    l_rgnlbl[myseg]       = []
    l_rgnres[myseg]       = []
    l_seg[myseg]          = []
    l_vmdrgn[myseg]       = []
    l_vmdrgn_check[myseg] = []
    for i in range(len(diff_res[myseg])-1):
        l_rgnlbl[myseg].append("%s%d" % (myseg, i))
        l_rgnres[myseg].append("range(%d,%d)" % (diff_res[myseg][i]+1, diff_res[myseg][i+1]+1))
        l_seg[myseg].append( myseg )
        l_vmdrgn[myseg].append("\"%s, resid %d to %d\"" % (myseg, diff_res[myseg][i]+1, diff_res[myseg][i+1]))
        l_vmdrgn_check[myseg].append("\"chain %s and resid %d to %d\"" % (myseg, diff_res[myseg][i]+1, diff_res[myseg][i+1]))


# the next line is just nicer printing in a python terminal
if 1 == 1:
    # for df_rgn_seg_res
    print("l_rgn      = [\"" + "\", \"".join(    [x for myseg in np.sort(seg2ss.keys()) for x in l_rgnlbl[myseg]]) + "\"]")
    print("l_seg      = [\"" + "\", \"".join(    [x for myseg in np.sort(seg2ss.keys()) for x in l_seg[myseg]]) + "\"]")
    print("l_resrange = [" + ", ".join(          [x for myseg in np.sort(seg2ss.keys()) for x in l_rgnres[myseg]]) + "]")
    # for rgn2segres
    print("set l_rgn          [list \"" + "\" \"".join([x for myseg in np.sort(seg2ss.keys()) for x in l_rgnlbl[myseg]]) + "\"]")
    print("set l_vmdrgn       [list " + " ".join(    [x for myseg in np.sort(seg2ss.keys()) for x in l_vmdrgn[myseg]]) + "]")
    print("set l_vmdrgn_check [list " + " ".join(    [x for myseg in np.sort(seg2ss.keys()) for x in l_vmdrgn_check[myseg]]) + "]")

#l_rgn      = ["A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18", "A19", "A20", "A21", "A22", "A23", "A24", "A25", "A26", "A27", "A28", "A29", "A30", "A31", "A32", "A33", "A34", "A35", "A36", "A37", "A38", "A39", "A40", "A41", "A42", "B0", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "B11", "B12", "B13", "B14", "B15", "B16", "B17", "B18", "B19", "B20", "B21", "B22", "B23", "B24", "B25", "B26", "B27", "B28", "B29", "B30", "B31", "B32", "B33", "B34", "B35", "B36", "B37", "B38", "B39", "B40", "B41", "B42", "C0"]
#l_seg      = ["A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "C"]
#l_resrange = [range(4,16), range(16,19), range(19,27), range(27,29), range(29,36), range(36,40), range(40,44), range(44,46), range(46,51), range(51,52), range(52,54), range(54,56), range(56,78), range(78,81), range(81,85), range(85,86), range(86,88), range(88,94), range(94,97), range(97,98), range(98,102), range(102,103), range(103,113), range(113,114), range(114,117), range(117,118), range(118,124), range(124,126), range(126,128), range(128,129), range(129,133), range(133,135), range(135,138), range(138,140), range(140,144), range(144,145), range(145,154), range(154,156), range(156,160), range(160,167), range(167,174), range(174,180), range(180,183), range(7,19), range(19,23), range(23,33), range(33,35), range(35,42), range(42,46), range(46,47), range(47,50), range(50,52), range(52,55), range(55,64), range(64,65), range(65,87), range(87,90), range(90,94), range(94,95), range(95,96), range(96,98), range(98,105), range(105,107), range(107,111), range(111,114), range(114,121), range(121,122), range(122,124), range(124,128), range(128,134), range(134,136), range(136,139), range(139,142), range(142,145), range(145,148), range(148,150), range(150,154), range(154,155), range(155,157), range(157,159), range(159,163), range(163,166), range(166,170), range(170,178), range(178,180), range(180,190), range(105,107)]
#set l_rgn          [list "A0" "A1" "A2" "A3" "A4" "A5" "A6" "A7" "A8" "A9" "A10" "A11" "A12" "A13" "A14" "A15" "A16" "A17" "A18" "A19" "A20" "A21" "A22" "A23" "A24" "A25" "A26" "A27" "A28" "A29" "A30" "A31" "A32" "A33" "A34" "A35" "A36" "A37" "A38" "A39" "A40" "A41" "A42" "B0" "B1" "B2" "B3" "B4" "B5" "B6" "B7" "B8" "B9" "B10" "B11" "B12" "B13" "B14" "B15" "B16" "B17" "B18" "B19" "B20" "B21" "B22" "B23" "B24" "B25" "B26" "B27" "B28" "B29" "B30" "B31" "B32" "B33" "B34" "B35" "B36" "B37" "B38" "B39" "B40" "B41" "B42" "C0"]
#set l_vmdrgn       [list "A, resid 4 to 15" "A, resid 16 to 18" "A, resid 19 to 26" "A, resid 27 to 28" "A, resid 29 to 35" "A, resid 36 to 39" "A, resid 40 to 43" "A, resid 44 to 45" "A, resid 46 to 50" "A, resid 51 to 51" "A, resid 52 to 53" "A, resid 54 to 55" "A, resid 56 to 77" "A, resid 78 to 80" "A, resid 81 to 84" "A, resid 85 to 85" "A, resid 86 to 87" "A, resid 88 to 93" "A, resid 94 to 96" "A, resid 97 to 97" "A, resid 98 to 101" "A, resid 102 to 102" "A, resid 103 to 112" "A, resid 113 to 113" "A, resid 114 to 116" "A, resid 117 to 117" "A, resid 118 to 123" "A, resid 124 to 125" "A, resid 126 to 127" "A, resid 128 to 128" "A, resid 129 to 132" "A, resid 133 to 134" "A, resid 135 to 137" "A, resid 138 to 139" "A, resid 140 to 143" "A, resid 144 to 144" "A, resid 145 to 153" "A, resid 154 to 155" "A, resid 156 to 159" "A, resid 160 to 166" "A, resid 167 to 173" "A, resid 174 to 179" "A, resid 180 to 182" "B, resid 7 to 18" "B, resid 19 to 22" "B, resid 23 to 32" "B, resid 33 to 34" "B, resid 35 to 41" "B, resid 42 to 45" "B, resid 46 to 46" "B, resid 47 to 49" "B, resid 50 to 51" "B, resid 52 to 54" "B, resid 55 to 63" "B, resid 64 to 64" "B, resid 65 to 86" "B, resid 87 to 89" "B, resid 90 to 93" "B, resid 94 to 94" "B, resid 95 to 95" "B, resid 96 to 97" "B, resid 98 to 104" "B, resid 105 to 106" "B, resid 107 to 110" "B, resid 111 to 113" "B, resid 114 to 120" "B, resid 121 to 121" "B, resid 122 to 123" "B, resid 124 to 127" "B, resid 128 to 133" "B, resid 134 to 135" "B, resid 136 to 138" "B, resid 139 to 141" "B, resid 142 to 144" "B, resid 145 to 147" "B, resid 148 to 149" "B, resid 150 to 153" "B, resid 154 to 154" "B, resid 155 to 156" "B, resid 157 to 158" "B, resid 159 to 162" "B, resid 163 to 165" "B, resid 166 to 169" "B, resid 170 to 177" "B, resid 178 to 179" "B, resid 180 to 189" "C, resid 105 to 106"]
#set l_vmdrgn_check [list "chain A and resid 4 to 15" "chain A and resid 16 to 18" "chain A and resid 19 to 26" "chain A and resid 27 to 28" "chain A and resid 29 to 35" "chain A and resid 36 to 39" "chain A and resid 40 to 43" "chain A and resid 44 to 45" "chain A and resid 46 to 50" "chain A and resid 51 to 51" "chain A and resid 52 to 53" "chain A and resid 54 to 55" "chain A and resid 56 to 77" "chain A and resid 78 to 80" "chain A and resid 81 to 84" "chain A and resid 85 to 85" "chain A and resid 86 to 87" "chain A and resid 88 to 93" "chain A and resid 94 to 96" "chain A and resid 97 to 97" "chain A and resid 98 to 101" "chain A and resid 102 to 102" "chain A and resid 103 to 112" "chain A and resid 113 to 113" "chain A and resid 114 to 116" "chain A and resid 117 to 117" "chain A and resid 118 to 123" "chain A and resid 124 to 125" "chain A and resid 126 to 127" "chain A and resid 128 to 128" "chain A and resid 129 to 132" "chain A and resid 133 to 134" "chain A and resid 135 to 137" "chain A and resid 138 to 139" "chain A and resid 140 to 143" "chain A and resid 144 to 144" "chain A and resid 145 to 153" "chain A and resid 154 to 155" "chain A and resid 156 to 159" "chain A and resid 160 to 166" "chain A and resid 167 to 173" "chain A and resid 174 to 179" "chain A and resid 180 to 182" "chain B and resid 7 to 18" "chain B and resid 19 to 22" "chain B and resid 23 to 32" "chain B and resid 33 to 34" "chain B and resid 35 to 41" "chain B and resid 42 to 45" "chain B and resid 46 to 46" "chain B and resid 47 to 49" "chain B and resid 50 to 51" "chain B and resid 52 to 54" "chain B and resid 55 to 63" "chain B and resid 64 to 64" "chain B and resid 65 to 86" "chain B and resid 87 to 89" "chain B and resid 90 to 93" "chain B and resid 94 to 94" "chain B and resid 95 to 95" "chain B and resid 96 to 97" "chain B and resid 98 to 104" "chain B and resid 105 to 106" "chain B and resid 107 to 110" "chain B and resid 111 to 113" "chain B and resid 114 to 120" "chain B and resid 121 to 121" "chain B and resid 122 to 123" "chain B and resid 124 to 127" "chain B and resid 128 to 133" "chain B and resid 134 to 135" "chain B and resid 136 to 138" "chain B and resid 139 to 141" "chain B and resid 142 to 144" "chain B and resid 145 to 147" "chain B and resid 148 to 149" "chain B and resid 150 to 153" "chain B and resid 154 to 154" "chain B and resid 155 to 156" "chain B and resid 157 to 158" "chain B and resid 159 to 162" "chain B and resid 163 to 165" "chain B and resid 166 to 169" "chain B and resid 170 to 177" "chain B and resid 178 to 179" "chain B and resid 180 to 189" "chain C and resid 105 to 106"]

#####################
# again in Python to prepare
# df_rgn_seg_res
# (copy & paste from above):
#####################
l_rgn      = ["A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18", "A19", "A20", "A21", "A22", "A23", "A24", "A25", "A26", "A27", "A28", "A29", "A30", "A31", "A32", "A33", "A34", "A35", "A36", "A37", "A38", "A39", "A40", "A41", "A42", "B0", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "B11", "B12", "B13", "B14", "B15", "B16", "B17", "B18", "B19", "B20", "B21", "B22", "B23", "B24", "B25", "B26", "B27", "B28", "B29", "B30", "B31", "B32", "B33", "B34", "B35", "B36", "B37", "B38", "B39", "B40", "B41", "B42", "C0"]
l_seg      = ["A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "C"]
l_resrange = [range(4,16), range(16,19), range(19,27), range(27,29), range(29,36), range(36,40), range(40,44), range(44,46), range(46,51), range(51,52), range(52,54), range(54,56), range(56,78), range(78,81), range(81,85), range(85,86), range(86,88), range(88,94), range(94,97), range(97,98), range(98,102), range(102,103), range(103,113), range(113,114), range(114,117), range(117,118), range(118,124), range(124,126), range(126,128), range(128,129), range(129,133), range(133,135), range(135,138), range(138,140), range(140,144), range(144,145), range(145,154), range(154,156), range(156,160), range(160,167), range(167,174), range(174,180), range(180,183), range(7,19), range(19,23), range(23,33), range(33,35), range(35,42), range(42,46), range(46,47), range(47,50), range(50,52), range(52,55), range(55,64), range(64,65), range(65,87), range(87,90), range(90,94), range(94,95), range(95,96), range(96,98), range(98,105), range(105,107), range(107,111), range(111,114), range(114,121), range(121,122), range(122,124), range(124,128), range(128,134), range(134,136), range(136,139), range(139,142), range(142,145), range(145,148), range(148,150), range(150,154), range(154,155), range(155,157), range(157,159), range(159,163), range(163,166), range(166,170), range(170,178), range(178,180), range(180,190), range(105,107)]

df_rgn_seg_res = pd.DataFrame({'rgn' : l_rgn, 
                               'seg' : l_seg,
                               'res' : l_resrange})
df_rgn_seg_res
#                                                  res  rgn seg
#0          [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]   A0   A
#1                                        [16, 17, 18]   A1   A
#2                    [19, 20, 21, 22, 23, 24, 25, 26]   A2   A
#3                                            [27, 28]   A3   A
#4                        [29, 30, 31, 32, 33, 34, 35]   A4   A
#5                                    [36, 37, 38, 39]   A5   A
#6                                    [40, 41, 42, 43]   A6   A
#7                                            [44, 45]   A7   A
#8                                [46, 47, 48, 49, 50]   A8   A
#9                                                [51]   A9   A
#10                                           [52, 53]  A10   A
#11                                           [54, 55]  A11   A
#12  [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 6...  A12   A
#13                                       [78, 79, 80]  A13   A
#14                                   [81, 82, 83, 84]  A14   A
#15                                               [85]  A15   A
#16                                           [86, 87]  A16   A
#17                           [88, 89, 90, 91, 92, 93]  A17   A
#18                                       [94, 95, 96]  A18   A
#19                                               [97]  A19   A
#20                                 [98, 99, 100, 101]  A20   A
#21                                              [102]  A21   A
#22  [103, 104, 105, 106, 107, 108, 109, 110, 111, ...  A22   A
#23                                              [113]  A23   A
#24                                    [114, 115, 116]  A24   A
#25                                              [117]  A25   A
#26                     [118, 119, 120, 121, 122, 123]  A26   A
#27                                         [124, 125]  A27   A
#28                                         [126, 127]  A28   A
#29                                              [128]  A29   A
#..                                                ...  ...  ..
#57                                   [90, 91, 92, 93]  B14   B
#58                                               [94]  B15   B
#59                                               [95]  B16   B
#60                                           [96, 97]  B17   B
#61                  [98, 99, 100, 101, 102, 103, 104]  B18   B
#62                                         [105, 106]  B19   B
#63                               [107, 108, 109, 110]  B20   B
#64                                    [111, 112, 113]  B21   B
#65                [114, 115, 116, 117, 118, 119, 120]  B22   B
#66                                              [121]  B23   B
#67                                         [122, 123]  B24   B
#68                               [124, 125, 126, 127]  B25   B
#69                     [128, 129, 130, 131, 132, 133]  B26   B
#70                                         [134, 135]  B27   B
#71                                    [136, 137, 138]  B28   B
#72                                    [139, 140, 141]  B29   B
#73                                    [142, 143, 144]  B30   B
#74                                    [145, 146, 147]  B31   B
#75                                         [148, 149]  B32   B
#76                               [150, 151, 152, 153]  B33   B
#77                                              [154]  B34   B
#78                                         [155, 156]  B35   B
#79                                         [157, 158]  B36   B
#80                               [159, 160, 161, 162]  B37   B
#81                                    [163, 164, 165]  B38   B
#82                               [166, 167, 168, 169]  B39   B
#83           [170, 171, 172, 173, 174, 175, 176, 177]  B40   B
#84                                         [178, 179]  B41   B
#85  [180, 181, 182, 183, 184, 185, 186, 187, 188, ...  B42   B
#86                                         [105, 106]   C0   C
#
#[87 rows x 3 columns]

#####################
# again in VMD to prepare
# rgn2segres
# (copy & paste from above):
#####################

set l_rgn          [list "A0" "A1" "A2" "A3" "A4" "A5" "A6" "A7" "A8" "A9" "A10" "A11" "A12" "A13" "A14" "A15" "A16" "A17" "A18" "A19" "A20" "A21" "A22" "A23" "A24" "A25" "A26" "A27" "A28" "A29" "A30" "A31" "A32" "A33" "A34" "A35" "A36" "A37" "A38" "A39" "A40" "A41" "A42" "B0" "B1" "B2" "B3" "B4" "B5" "B6" "B7" "B8" "B9" "B10" "B11" "B12" "B13" "B14" "B15" "B16" "B17" "B18" "B19" "B20" "B21" "B22" "B23" "B24" "B25" "B26" "B27" "B28" "B29" "B30" "B31" "B32" "B33" "B34" "B35" "B36" "B37" "B38" "B39" "B40" "B41" "B42" "C0"]
set l_vmdrgn       [list "A, resid 4 to 15" "A, resid 16 to 18" "A, resid 19 to 26" "A, resid 27 to 28" "A, resid 29 to 35" "A, resid 36 to 39" "A, resid 40 to 43" "A, resid 44 to 45" "A, resid 46 to 50" "A, resid 51 to 51" "A, resid 52 to 53" "A, resid 54 to 55" "A, resid 56 to 77" "A, resid 78 to 80" "A, resid 81 to 84" "A, resid 85 to 85" "A, resid 86 to 87" "A, resid 88 to 93" "A, resid 94 to 96" "A, resid 97 to 97" "A, resid 98 to 101" "A, resid 102 to 102" "A, resid 103 to 112" "A, resid 113 to 113" "A, resid 114 to 116" "A, resid 117 to 117" "A, resid 118 to 123" "A, resid 124 to 125" "A, resid 126 to 127" "A, resid 128 to 128" "A, resid 129 to 132" "A, resid 133 to 134" "A, resid 135 to 137" "A, resid 138 to 139" "A, resid 140 to 143" "A, resid 144 to 144" "A, resid 145 to 153" "A, resid 154 to 155" "A, resid 156 to 159" "A, resid 160 to 166" "A, resid 167 to 173" "A, resid 174 to 179" "A, resid 180 to 182" "B, resid 7 to 18" "B, resid 19 to 22" "B, resid 23 to 32" "B, resid 33 to 34" "B, resid 35 to 41" "B, resid 42 to 45" "B, resid 46 to 46" "B, resid 47 to 49" "B, resid 50 to 51" "B, resid 52 to 54" "B, resid 55 to 63" "B, resid 64 to 64" "B, resid 65 to 86" "B, resid 87 to 89" "B, resid 90 to 93" "B, resid 94 to 94" "B, resid 95 to 95" "B, resid 96 to 97" "B, resid 98 to 104" "B, resid 105 to 106" "B, resid 107 to 110" "B, resid 111 to 113" "B, resid 114 to 120" "B, resid 121 to 121" "B, resid 122 to 123" "B, resid 124 to 127" "B, resid 128 to 133" "B, resid 134 to 135" "B, resid 136 to 138" "B, resid 139 to 141" "B, resid 142 to 144" "B, resid 145 to 147" "B, resid 148 to 149" "B, resid 150 to 153" "B, resid 154 to 154" "B, resid 155 to 156" "B, resid 157 to 158" "B, resid 159 to 162" "B, resid 163 to 165" "B, resid 166 to 169" "B, resid 170 to 177" "B, resid 178 to 179" "B, resid 180 to 189" "C, resid 105 to 106"]
set l_vmdrgn_check [list "chain A and resid 4 to 15" "chain A and resid 16 to 18" "chain A and resid 19 to 26" "chain A and resid 27 to 28" "chain A and resid 29 to 35" "chain A and resid 36 to 39" "chain A and resid 40 to 43" "chain A and resid 44 to 45" "chain A and resid 46 to 50" "chain A and resid 51 to 51" "chain A and resid 52 to 53" "chain A and resid 54 to 55" "chain A and resid 56 to 77" "chain A and resid 78 to 80" "chain A and resid 81 to 84" "chain A and resid 85 to 85" "chain A and resid 86 to 87" "chain A and resid 88 to 93" "chain A and resid 94 to 96" "chain A and resid 97 to 97" "chain A and resid 98 to 101" "chain A and resid 102 to 102" "chain A and resid 103 to 112" "chain A and resid 113 to 113" "chain A and resid 114 to 116" "chain A and resid 117 to 117" "chain A and resid 118 to 123" "chain A and resid 124 to 125" "chain A and resid 126 to 127" "chain A and resid 128 to 128" "chain A and resid 129 to 132" "chain A and resid 133 to 134" "chain A and resid 135 to 137" "chain A and resid 138 to 139" "chain A and resid 140 to 143" "chain A and resid 144 to 144" "chain A and resid 145 to 153" "chain A and resid 154 to 155" "chain A and resid 156 to 159" "chain A and resid 160 to 166" "chain A and resid 167 to 173" "chain A and resid 174 to 179" "chain A and resid 180 to 182" "chain B and resid 7 to 18" "chain B and resid 19 to 22" "chain B and resid 23 to 32" "chain B and resid 33 to 34" "chain B and resid 35 to 41" "chain B and resid 42 to 45" "chain B and resid 46 to 46" "chain B and resid 47 to 49" "chain B and resid 50 to 51" "chain B and resid 52 to 54" "chain B and resid 55 to 63" "chain B and resid 64 to 64" "chain B and resid 65 to 86" "chain B and resid 87 to 89" "chain B and resid 90 to 93" "chain B and resid 94 to 94" "chain B and resid 95 to 95" "chain B and resid 96 to 97" "chain B and resid 98 to 104" "chain B and resid 105 to 106" "chain B and resid 107 to 110" "chain B and resid 111 to 113" "chain B and resid 114 to 120" "chain B and resid 121 to 121" "chain B and resid 122 to 123" "chain B and resid 124 to 127" "chain B and resid 128 to 133" "chain B and resid 134 to 135" "chain B and resid 136 to 138" "chain B and resid 139 to 141" "chain B and resid 142 to 144" "chain B and resid 145 to 147" "chain B and resid 148 to 149" "chain B and resid 150 to 153" "chain B and resid 154 to 154" "chain B and resid 155 to 156" "chain B and resid 157 to 158" "chain B and resid 159 to 162" "chain B and resid 163 to 165" "chain B and resid 166 to 169" "chain B and resid 170 to 177" "chain B and resid 178 to 179" "chain B and resid 180 to 189" "chain C and resid 105 to 106"]

set l_rgn2segres {}
foreach myrgn $l_rgn myvmdrgn $l_vmdrgn {
    lappend l_rgn2segres $myrgn $myvmdrgn
}
array set rgn2segres $l_rgn2segres

#####################
# again in VMD to check region residue ranges
# interactively on the structure
#####################

mol load webpdb 3pdo
mol delrep 0 top
for {set i 0} {$i<[llength $l_vmdrgn_check]} {incr i} {
	set myrgn [lindex $l_vmdrgn_check $i]
	mol representation NewCartoon
	mol color ColorID [expr $i % 2]
	mol selection $myrgn
	mol material Opaque
	mol addrep top
} 
